{"version":3,"sources":["src/math/vector2.ts","camera.ts","tools.ts","../engine/drawer.ts","mouse.ts","keyboard.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src\\app","sourcesContent":["/**\n * This class represents a vector or point in 2D space.\n*/\n export class Vector2 {\n    public x: number;\n    public y: number;\n    public static readonly EPSILON=1e-9;\n\n \n    constructor(x: number = 0, y: number = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public set(x:number|Vector2,y:number=0):Vector2{\n        if(x instanceof Vector2){\n            this.x=x.x;\n            this.y=x.y;\n            return this;\n        }\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n     /**\n     * Returns a copy of this {@link Vector2}.\n     * @return {Vector2} {@link Vector2}\n     */\n    public copy(): Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n\n     /**\n     * Returns true if Vector is exactly equal to specified coordinates\n     * @param {number|Vector2} x\n     * @param {number} y\n     * @return\n     * @return {boolean}\n     */\n    public equals(x: number|Vector2, y: number): boolean {\n        if(x instanceof Vector2){\n            if (this==x) return true;\n            return (this.x==x.x && this.y==x.y);\n        }\n        return this.x==x && this.y==y;\n    }\n\n\n    /**\n     * Returns true if Vector is very Close to specified coordinates\n     * @param {number|Vector2} x \n     * @param {number} y\n     * @return\n     * @return {boolean}\n     */\n     public approxEquals(x: number|Vector2, y: number): boolean {\n        if(x instanceof Vector2){\n            if (this==x) return true;\n            return Math.abs(this.x - x.x) < Vector2.EPSILON && Math.abs(this.y - x.y) < Vector2.EPSILON;\n        }\n        return Math.abs(this.x - x) < Vector2.EPSILON && Math.abs(this.y - y) < Vector2.EPSILON;\n    }\n\n\n    public add(x:number|Vector2,y:number=0):Vector2{\n           if(x instanceof Vector2){\n               this.x += x.x;\n               this.y += x.y;\n           }else{\n               this.x += x;\n               this.y += y;\n           }\n           return this;\n    }\n\n\n    public subtract(x:number|Vector2,y:number=0):Vector2{\n        if(x instanceof Vector2){\n            this.x -= x.x;\n            this.y -= x.y;\n        }else{\n            this.x -= x;\n            this.y -= y;\n        }\n        return this;\n    }\n\n    public multiply(x:number|Vector2,y:number=0):Vector2{\n        if(x instanceof Vector2){\n            this.x *= x.x;\n            this.y *= x.y;\n        }else{\n            this.x *= x;\n            this.y *= y;\n        }\n        return this;\n    }\n\n    public scale(s:number){\n        this.x*=s;\n        this.y*=s;\n        return this;\n    }\n\n    public negate():Vector2 {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n   \n    /**\n\t * Sets this vector to the right-handed normal of this vector.\n\t * @return {@link Vector2} this vector\n\t */\n     public right():Vector2 {\n\t\tlet temp = this.x;\n\t\tthis.x = -this.y;\n\t\tthis.y = temp;\n\t\treturn this;\n\t}\n    /**\n\t * Sets this vector to the right-handed normal of this vector.\n\t * @return {@link Vector2} this vector\n\t */\n     public left():Vector2 {\n\t\tlet temp = this.x;\n\t\tthis.x = this.y;\n\t\tthis.y = -temp;\n\t\treturn this;\n\t}\n\n    /**\n     * Rotates this vector about specified point (x0,y0) \n     * @param theta Angle in radians\n     * @param x0 \n     * @param y0 \n     * @returns \n     */\n     public rotate(theta: number, x0: number=0, y0: number=0): Vector2 {\n        this.x -= x0;\n        this.y -= y0;\n        const cos: number = Math.cos(theta);\n        const sin: number = Math.sin(theta);\n        const x: number = this.x;\n        const y: number = this.y;\n        this.x = x * cos - y * sin;\n        this.y = x * sin + y * cos;\n        this.x += x0;\n        this.y += y0;\n        return this;\n    }\n\n\n    public  getMagnitude(): number {\n        return Math.sqrt(this.getMagnitudeSqrd());\n    }\n\n    public setMagnitude(newLen:number)  {\n        const len = newLen/this.getMagnitude();\n        this.x *= len;\n        this.y *= len;\n    }\n   \n\n    public getMagnitudeSqrd(): number {\n        return this.x * this.x + this.y * this.y;\n    }\n\n      /**\n     * Normalises this vector and returns its length\n     * @returns \n     */\n       public normalize() {\n        const len = this.getMagnitude();\n        if (len > 0) {\n            this.x /= len;\n            this.y /= len;\n        }\n        return len;\n    }\n\n    /**\n     * \n     * @returns Returns unit vector\n     */\n    public getNormalized(): Vector2 {\n        const v = new Vector2(this.x, this.y);\n        const len = this.getMagnitude();\n        if (len > 0) {\n            v.x /= len;\n            v.y /= len;\n        }\n        return v;\n    }\n\n\n     /**\n     * Returns the angle of this {@link Vector2} with +ve x axis\n     * as an angle in radians.\n     * @return {number} double angle in radians [0, 2*&pi;]\n     */\n      public getAngleWithPositiveXAxis(): number {\n        let theta: number = Math.atan2(this.y, this.x);\n        if (theta < 0)theta += Math.PI * 2;\n        return theta;\n    }\n\n    public getAngleWith(vector: Vector2): number {\n        const a: number = Math.atan2(vector.y, vector.x) - Math.atan2(this.y, this.x);\n        if (a > Math.PI)return a - 2 * Math.PI;\n        if (a < -Math.PI)return a + 2 * Math.PI;\n        return a;\n    }\n\n  \n   \n    \n\n    ////STATIC METHODS\n\n    /**\n     * Adds two vector and returns their sum\n     * @param a \n     * @param b \n     * @returns  new vector\n     */\n    public static sum(a: Vector2, b: Vector2): Vector2 {\n        return new Vector2(a.x + b.x, a.y + b.y);\n    }\n\n    /**\n     * Subtracts b from a a and returns result\n     * @param a \n     * @param b \n     * @param t \n     * @returns \n     */\n    public static difference(a: Vector2, b: Vector2): Vector2 {\n        return new Vector2(a.x -b.x, a.y - b.y);\n    }\n\n    public static product(a: Vector2, b: Vector2): Vector2 {\n        return new Vector2(a.x * b.x, a.y * b.y);\n    }\n\n    public static dot(a: Vector2, b: Vector2): number {\n        return a.x * b.x + a.y * b.y;\n    }\n\n    public static cross(a: Vector2, b: Vector2): number {\n        return a.x * b.y - a.y * b.x;\n    }\n\n    /**\n     * returns a+t.b\n     * @param a \n     * @param b \n     * @param t parameter between 0 and 1\n     * @returns new Vector2\n     */\n    public static lerp(a: Vector2, b: Vector2,t:number): Vector2 {\n        return new Vector2(a.x*(1-t) + b.x*t, a.y*(1-t) + b.y*t);\n    }\n\n\n    /**\n     * Tests if the three points are colinear.\n     * \n     * @return {boolean} true if three points lie on the same line.\n     * @param {Vector2} p1\n     * @param {Vector2} p2\n     * @param {Vector2} p3\n     */\n     public static isCollinear(p1: Vector2, p2: Vector2, p3: Vector2): boolean {\n        let dx1: number;\n        let dx2: number;\n        let dy1: number;\n        let dy2: number;\n        dx1 = p2.x - p1.x;\n        dy1 = p2.y - p1.y;\n        dx2 = p3.x - p1.x;\n        dy2 = p3.y - p1.y;\n        return Math.abs(dx1 * dy2 - dy1 * dx2) < Vector2.EPSILON;\n    }\n\n\n }","import { Vector2 } from \"../math/vector2\"\n\nexport default class Camera {\n\t/**maximum percentage zoom */\n\tpublic static readonly METER_TO_PIXEL = 100;\n\n\t/**maximum percentage zoom */\n\tprotected static readonly MAX_ZOOM = 4000;\n\n\t/**minimum percentage zoom*/\n\tprotected static readonly MIN_ZOOM = 1;\n\n\tprotected static ZOOM_OUT_FACTOR = 1.05;\n\n\tprotected static ZOOM_IN_FACTOR = 0.96;\n\tpublic canvas: HTMLCanvasElement;\n\tpublic ctx: CanvasRenderingContext2D;\n\n\t/** The zoom factor */\n\tprotected scale = Camera.METER_TO_PIXEL;\n\n\t/** The translation from 0,0 */\n\tprotected translation: Vector2 = new Vector2(0, 0);\n\n\t/**\n\t * Default constructor.\n\t * <p>\n\t * Defaults to a 100 to scale(pixel per meter) and zero translation.\n\t */\n\tpublic constructor( canvas:HTMLCanvasElement,scale = Camera.METER_TO_PIXEL, translation = new Vector2()) {\n\t\tthis.scale = scale;\n\t\tthis.translation = translation;\n\t\tthis.canvas=canvas;\n\t\tthis.ctx=canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\t}\n\n\n\n\t/**\n\t * Zooms camera to specified percentage zoom.\n\t * @param zoomPercentage Desired Percentage ZOOM\n\t */\n\tpublic zoomTo(zoomPercentage: number): void {\n\t\tif (zoomPercentage < Camera.MIN_ZOOM) zoomPercentage = Camera.MIN_ZOOM;\n\t\tif (zoomPercentage > Camera.MAX_ZOOM) zoomPercentage = Camera.MAX_ZOOM;\n\t\tthis.scale = zoomPercentage;\n\t}\n\n\t/**\n\t * Zooms camera to specified percentage zoom about specified point as origin.\n\t * @param zoomPercentage Desired Percentage ZOOM\n\t * @param pt  Zoom about pt as centre\n\t */\n\tpublic zoomToAboutPoint(zoomPercentage: number, pt: Vector2): void {\n\t\tlet prevScale = this.scale;\n\t\tthis.zoomTo(zoomPercentage);\n\t\tthis.translation.add(pt.scale((-this.scale + prevScale) / this.scale));\n\t}\n\n\n\t/**\n\t * Zooms out the camera.\n\t */\n\tpublic zoomOut(): void {\n\t\tthis.zoomTo(this.scale * Camera.ZOOM_OUT_FACTOR);\n\t}\n\n\t/**\n\t * Zooms in the camera.\n\t */\n\tpublic zoomIn(): void {\n\t\tthis.zoomTo(this.scale * Camera.ZOOM_IN_FACTOR);\n\t}\n\n\t/**\n\t * Zooms out the camera about point (in world coordinates).\n\t * @param pt Zoom about pt as centre\n\t */\n\tpublic zoomOutAboutPoint(pt: Vector2): void {\n\t\tthis.zoomToAboutPoint(this.scale * Camera.ZOOM_OUT_FACTOR, pt);\n\t}\n\n\t/**\n\t * Zooms in the camera about point (in world coordinates).\n\t * @param pt  Zoom about pt as centre\n\t */\n\tpublic zoomInAboutPoint(pt: Vector2): void {\n\t\tthis.zoomToAboutPoint(this.scale * Camera.ZOOM_IN_FACTOR, pt);\n\t}\n\n\t/**\n\t * Moves the camera back to the origin (Now World origin will be rendered at screen center).\n\t */\n\tpublic toOrigin(): void {\n\t\tthis.translation.set(0, 0);\n\t}\n\n\n\t/**\n\t * Translates the camera the given amount along the x and y axes.\n\t * @param x the x translation\n\t * @param y the y translation\n\t */\n\tpublic translate(x: number, y: number) {\n\t\tthis.translation.x += x;\n\t\tthis.translation.y += y;\n\t}\n\n\t// getter/setters\n\n\t/**\n\t * Returns the scale factor in pixel per meter.\n\t * @return double\n\t */\n\tpublic getScale(): number {\n\t\treturn this.scale;\n\t}\n\n\t/**\n\t * Sets the scale factor in pixels per meter.\n\t * @param scale the desired scale factor\n\t */\n\tpublic setScale(scale: number) {\n\t\tthis.scale = scale;\n\t}\n\n\t/**\n\t * Returns the offset of camera (displacement of screen center from 'world center rendered on screen').\n\t * @return Vector2\n\t */\n\tpublic getTranslation(): Vector2 {\n\t\treturn this.translation;\n\t}\n\n\t/**\n\t * Sets the offset/translation from the origin in world coordinates.\n\t * @param translation the translation\n\t */\n\tpublic setTranslation(translation: Vector2) {\n\t\tthis.translation.set(translation);\n\n\t}\n\n\t/**\n\t * Converts from world coordinates to screen coordinates, having origin at midpoint and up as positive\n\t * to convert to swing coordinates use \n\t * <pre>\n\t * p=worldToScreen(Vector2 worldPoint)\n\t * p.set(p.x+canvas.getWidth()/2,-p.y+canvas.getHeight()/2); \n\t * </pre>\n\t * @param worldPoint\n\t * @return Point p in screen Coordinates\n\t */\n\tpublic worldToScreen(worldPoint: Vector2): Vector2 {\n\t\tlet offset = this.translation;\n\t\tlet scale = this.scale;\n\t\tworldPoint = worldPoint.copy().add(offset.x, offset.y);\n\t\tworldPoint.scale(scale);\n\t\treturn worldPoint;\n\t}\n\tpublic begin() {\n\t\tthis.ctx.save();\n\t\tthis.ctx.translate(this.ctx.canvas.width / 2, this.ctx.canvas.height / 2);\n\t\tthis.ctx.scale(this.scale, -this.scale);\n\t\tthis.ctx.translate(this.translation.x, this.translation.y);\n\t}\n\n\tpublic end() {\n\t\tthis.ctx.restore();\n\t}\n\n}\n","export default class Tools{\r\n\r\n    public container:HTMLElement;\r\n\r\n    constructor(container:HTMLElement){\r\n        this.container=container;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param x x position in canvas\r\n     * @param y y position in canvas\r\n     */\r\n    public addtextarea(x:number,y:number){\r\n        var textarea=document.createElement(\"input\");\r\n        textarea.type=\"text\";\r\n        textarea.className=\"form-control\"\r\n        textarea.style.left=x+'px';\r\n        textarea.style.bottom=(600-y)+'px';\r\n        textarea.style.position='absolute';\r\n        textarea.style.width='10%';\r\n        this.container?.appendChild(textarea);\r\n        console.log(\"textarea function triggered\");\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param x x position in canvas\r\n     * @param y y position in canvas\r\n     */\r\n    public addbutton(x:number,y:number){\r\n        var button=document.createElement(\"input\");\r\n        button.type=\"button\";\r\n        button.className=\"btn btn-primary\";\r\n        button.style.left=x+'px';\r\n        button.style.bottom=(600-y)+'px';\r\n        button.style.position='absolute';\r\n        button.value=\"button\";\r\n        this.container?.appendChild(button);\r\n    }\r\n\r\n    //label\r\n    public addlabel(x:number,y:number){\r\n        var label=document.createElement('p');\r\n        label.className='text-justify';\r\n        label.style.left=x+\"px\";\r\n        label.style.right=(600-y)+\"px\";\r\n        label.style.position='absolute';\r\n        label.innerHTML='Label';\r\n        this.container?.appendChild(label);\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param x x position in canvas\r\n     * @param y y position in canvas\r\n     * @param min starting number of range\r\n     * @param max last number of range\r\n     * @param initial_value initial number given from the range\r\n     */\r\n    public addslider(x:number,y:number,min:number,max:number,initial_value:number){\r\n        var slider=document.createElement(\"input\");\r\n        slider.type=\"range\";\r\n        slider.min=min.toString();\r\n        slider.max=max.toString();\r\n        slider.className=\"form-range\"\r\n        slider.style.left=x+'px';\r\n        slider.style.bottom=(600-y)+'px';\r\n        slider.style.width='10%';\r\n        slider.style.position='absolute';\r\n        slider.value=initial_value.toString();\r\n        this.container?.appendChild(slider);\r\n    }\r\n\r\n}","import camera from \"../app\";\r\nimport Camera from \"../app/camera\";\r\nimport collision from \"./collision\";\r\nvar objects:circle[]=[];\r\nclass drawer extends Camera{\r\n\r\n    // public circle:circle;\r\n    public createcircle(centerx:number,centery:number,radius:number=0.2,color:string='red'):circle{\r\n        objects.push(new circle(this.canvas));\r\n        var len=objects.length-1;\r\n        objects[len].drawcircle(centerx,centery,radius,color);\r\n\r\n        return objects[len];\r\n    }\r\n}\r\n\r\nclass circle extends Camera{\r\n\r\n    public name:string='';\r\n    public centerx:number=0;\r\n    public centery:number=0;\r\n    public velocityx:number=0;\r\n    public velocityy:number=0;\r\n\r\n    public drawcircle(centerx:number,centery:number,radius:number=0.2,color:string='red'):circle{\r\n        // console.log(\"circle \");\r\n        this.centerx=centerx;\r\n        this.centery=centery;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(centerx, centery, radius, 0, 2 * Math.PI, false);\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.fill();\r\n        this.ctx.imageSmoothingEnabled=true;\r\n        this.ctx.imageSmoothingQuality='high';\r\n        this.ctx.closePath();\r\n        \r\n        return this;\r\n        // this.ctx.lineWidth = 5;\r\n        // this.ctx.strokeStyle = '#003300';\r\n        // this.ctx.stroke();\r\n    }\r\n\r\n    public update(centerx:number=this.centerx,centery:number=this.centery){\r\n        // console.log(centerx);\r\n        this.drawcircle(centerx,centery);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {objects,drawer};","import camera from \".\";\r\nimport { drawer, objects } from \"../engine/drawer\";\r\nexport default class mouse{\r\n    constructor(){\r\n        document.onwheel = e => {\r\n\t\t\tif (e.deltaY > 0) {\r\n\t\t\t\tcamera.zoomIn();\r\n\t\t\t} else {\r\n\t\t\t\tcamera.zoomOut();\r\n\t\t\t}\r\n\t\t};\r\n        var isfirstmousemove=0;\r\n        var valuex=0;\r\n        var valuey=0;\r\n        var ismousedown=0;\r\n        var factor=500;\r\n\r\n        document.onmousedown=e=>{\r\n            globalThis.x=e.x;\r\n            globalThis.y=e.y;\r\n            isfirstmousemove=0;\r\n            ismousedown=1;\r\n        }\r\n        document.onmousemove=e=>{\r\n            objects[0].centerx=e.x*0.01-(camera.ctx.canvas.width/2);\r\n            objects[0].centery=-e.y*0.01+(camera.ctx.canvas.height/2);\r\n            if(objects[0].centerx===objects[1].centerx){\r\n                console.log(\"yay\");\r\n            }\r\n            // console.log(objects[0].centerx);\r\n            if(ismousedown==1){\r\n                if(isfirstmousemove==0){\r\n                    camera.translate((e.x-globalThis.x)/factor,-(e.y-globalThis.y)/factor);\r\n                    isfirstmousemove=1;\r\n                    valuex=e.x;\r\n                    valuey=e.y;\r\n                }\r\n                else{\r\n                    camera.translate((e.x-valuex)/factor,-(e.y-valuey)/factor);\r\n                    valuex=e.x;\r\n                    valuey=e.y;\r\n                }\r\n            }\r\n        }\r\n        document.onmouseup=e=>{\r\n            ismousedown=0;\r\n        }\r\n    }\r\n}","import camera from \".\";\r\nimport { Vector2 } from \"../math/vector2\";\r\nexport default class keyboard{\r\n    constructor(){\r\n        window.addEventListener('keydown', e => {\r\n\t\t\tswitch (e.key) {\r\n\t\t\t\tcase \"ArrowLeft\":\r\n\t\t\t\t\tcamera.translate(-0.05, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"ArrowRight\":\r\n\t\t\t\t\tcamera.translate(0.05, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"ArrowDown\":\r\n\t\t\t\t\tcamera.translate(0, -0.05);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"ArrowUp\":\r\n\t\t\t\t\tcamera.translate(0, 0.05);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'r':\r\n\t\t\t\t\tcamera.zoomToAboutPoint(1000, new Vector2(0, 0));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t};\r\n\r\n\t\t});\r\n    }\r\n}","import Camera from '../app/camera';\nimport Tools from '../app/tools'\nimport mouse from '../app/mouse'\nimport keyboard from './keyboard';\nimport {drawer} from '../engine/drawer';\n// import Renderer from '../app/renderer'\n\nlet canvas=document.getElementById(\"canvas\") as HTMLCanvasElement;\nlet container=document.getElementById(\"container\") as HTMLElement;\nlet ctx=canvas.getContext(\"2d\") as  CanvasRenderingContext2D;\n\n//declaration of classes\nlet camera=new Camera(canvas);\nlet tools=new Tools(container);\nnew mouse();\nnew keyboard();\nlet drawer1=new drawer(canvas);\n\n//tools testing declaration\ntools.addtextarea(20,30);\ntools.addtextarea(80,50);\ntools.addbutton(20,60);\ntools.addslider(20,200,0,100,50);\n\nrequestAnimationFrame(render);\n\nvar circle1=drawer1.createcircle(0,0);\nvar circle2=drawer1.createcircle(0.5,0.5,0.3);\nconsole.log(circle1.centerx);\n\nfunction render(){\n    ctx.clearRect(0,0,canvas.width,canvas.height);\n    camera.begin();\n    circle1.update();\n    circle2.update();\n    camera.end();\n    requestAnimationFrame(render);\n}\n\nexport default camera; \n\n"]}